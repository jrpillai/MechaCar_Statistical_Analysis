# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# R is a one-index language!
presidents[2]
### Combine vectors into a single vector
combined_vector <- c(disney_characters, presidents)
combined_vector
### A for-loop
for (x in combined_vector) {
print(x)
}
# Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
# An if/else statement
# nchar() returns the number of characters
for (prez in presidents) {
if (nchar(prez) > 5) {
next
}
else {
print(prez)
}
}
# A list, unlike a vector, can contain various data types
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=presidents,
"nums"=c(1,2,3,4,5),
"bools"=c(T,F,T,T,T,F)
)
# We can use the bracket notation to access an item in a list:
random_list["states"]
# Or use the $ sign
random_list$coins
# Verify type
typeof(random_list)
numbers_vector <- c(1, 3, 5, 7, 9, 11)
for (x in combined_vector) {
print(x)
}
for (x in combined_vector) {
print(x)
}
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)}
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)}
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)}
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (people in class){
print(people)}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(people in class){
print(people)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
print(sample(33:66,3))
}
}
next
# Part I
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(people in class){
print(people)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
print(sample(33:66,3))
}
}
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
print(sample(33:66,3))
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(people in class){
print(people)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
print(sample(33:66,3))
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
# Part I
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(people in class){
print(people)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
print(sample(33:66,3))
}
}
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Folicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(people in class){
print(people)
}
}
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(people in class){
print(people)
print(sample(33,3))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("../Resources/students.csv")
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students[['school_name']])
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
setwd("~/")
library(tidyverse)
mosquito <- read.csv(file="04-Ins_ANOVA/Resources/mosquito.csv")
ggplot(mosquito,aes(x=factor(treatment),y=mosq)) + geom_boxplot()
# aov performs the analysis of variance, but does not provide a p-value
aov(mosq ~ factor(treatment), data=mosquito)
# to obtain a p-value, wrap aov() with a summary() function
summary(aov(mosq ~ factor(treatment), data=mosquito))
setwd("C:/Users/jayan/Desktop/Classwork/New Git Hub/Module 15/MechaCar_Statistical_Analysis")
Suspension_Coil <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
total_summary <- summarize(Suspension_Coil)
library(tidyverse) #load tidyverse
library(dplyr) #load dplyr
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)) #generate summary statistics
Suspension_Coil <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
total_summary <- summarize(Suspension_Coil)
View(total_summary)
View(Suspension_Coil)
Suspension_Coil <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(total_summary)
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(lot_summary)
t.test(Suspension_Coil$PSI,mu=1500)
t.test(x = Suspension_Coil$PSI, mu = 1500)
# T-test for each individual lot
t.test(x = Suspension_Coil$PSI, mu = 1500, subset = (Suspension_Coil$Manufacturing_Lot = "Lot1"))
t.test(x = Suspension_Coil$PSI, mu = 1500, subset = (Suspension_Coil$Manufacturing_Lot = "Lot2"))
t.test(x = Suspension_Coil$PSI, mu = 1500, subset = (Suspension_Coil$Manufacturing_Lot = "Lot3"))
t.test(x = Suspension_Coil$PSI, mu = 1500, subset = (Suspension_Coil$Manufacturing_Lot = Lot3))
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu = 1500)
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == Lot3), mu = 1500)
# Subset for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu = 1500)
# T-test across all manufacturing lots
t.test(x = Suspension_Coil$PSI, mu = 1500)
# Subset for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu = 1500)
# Subset for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu = 1500)
# Subset for Lot 3
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu = 1500)
# Deliverable 1
library(tidyverse) #load tidyverse
library(dplyr) #load dplyr
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)) #generate summary statistics
# Deliverable 2
# Create total summary dataframe with summarize()
Suspension_Coil <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F) #Read in CSV as dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI)) #Make summary dataframe
# Create lot summary function with groupby()
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
# Deliverable 3
# T-test across all manufacturing lots
t.test(x = Suspension_Coil$PSI, mu = 1500)
# Subset for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu = 1500)
# Subset for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu = 1500)
# Subset for Lot 3
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu = 1500)
